/*
 * This file is generated by jOOQ.
 */
package com.optiply.infrastructure.data.models.tables;


import com.optiply.infrastructure.data.models.DefaultSchema;
import com.optiply.infrastructure.data.models.Keys;
import com.optiply.infrastructure.data.models.tables.records.WebshopemailsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webshopemails extends TableImpl<WebshopemailsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>webshopEmails</code>
     */
    public static final Webshopemails WEBSHOPEMAILS = new Webshopemails();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebshopemailsRecord> getRecordType() {
        return WebshopemailsRecord.class;
    }

    /**
     * The column <code>webshopEmails.addressId</code>.
     */
    public final TableField<WebshopemailsRecord, Long> ADDRESSID = createField(DSL.name("addressId"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>webshopEmails.webshopId</code>.
     */
    public final TableField<WebshopemailsRecord, Long> WEBSHOPID = createField(DSL.name("webshopId"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>webshopEmails.address</code>.
     */
    public final TableField<WebshopemailsRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    private Webshopemails(Name alias, Table<WebshopemailsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Webshopemails(Name alias, Table<WebshopemailsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>webshopEmails</code> table reference
     */
    public Webshopemails(String alias) {
        this(DSL.name(alias), WEBSHOPEMAILS);
    }

    /**
     * Create an aliased <code>webshopEmails</code> table reference
     */
    public Webshopemails(Name alias) {
        this(alias, WEBSHOPEMAILS);
    }

    /**
     * Create a <code>webshopEmails</code> table reference
     */
    public Webshopemails() {
        this(DSL.name("webshopEmails"), null);
    }

    public <O extends Record> Webshopemails(Table<O> child, ForeignKey<O, WebshopemailsRecord> key) {
        super(child, key, WEBSHOPEMAILS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<WebshopemailsRecord, Long> getIdentity() {
        return (Identity<WebshopemailsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WebshopemailsRecord> getPrimaryKey() {
        return Keys.WEBSHOPEMAILS_PK;
    }

    @Override
    public List<ForeignKey<WebshopemailsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.WEBSHOPEMAILS_FK0);
    }

    private transient Webshop _webshop;

    /**
     * Get the implicit join path to the <code>PUBLIC.webshop</code> table.
     */
    public Webshop webshop() {
        if (_webshop == null)
            _webshop = new Webshop(this, Keys.WEBSHOPEMAILS_FK0);

        return _webshop;
    }

    @Override
    public Webshopemails as(String alias) {
        return new Webshopemails(DSL.name(alias), this);
    }

    @Override
    public Webshopemails as(Name alias) {
        return new Webshopemails(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Webshopemails rename(String name) {
        return new Webshopemails(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Webshopemails rename(Name name) {
        return new Webshopemails(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
