/*
 * This file is generated by jOOQ.
 */
package com.optiply.infrastructure.data.models.tables;


import com.optiply.infrastructure.data.models.DefaultSchema;
import com.optiply.infrastructure.data.models.Keys;
import com.optiply.infrastructure.data.models.tables.records.WebshopRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webshop extends TableImpl<WebshopRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>webshop</code>
     */
    public static final Webshop WEBSHOP = new Webshop();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebshopRecord> getRecordType() {
        return WebshopRecord.class;
    }

    /**
     * The column <code>webshop.webshopId</code>.
     */
    public final TableField<WebshopRecord, Long> WEBSHOPID = createField(DSL.name("webshopId"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>webshop.handle</code>.
     */
    public final TableField<WebshopRecord, String> HANDLE = createField(DSL.name("handle"), SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>webshop.url</code>.
     */
    public final TableField<WebshopRecord, String> URL = createField(DSL.name("url"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>webshop.interestRate</code>.
     */
    public final TableField<WebshopRecord, Short> INTERESTRATE = createField(DSL.name("interestRate"), SQLDataType.SMALLINT.nullable(false).defaultValue(DSL.field("'20'", SQLDataType.SMALLINT)), this, "");

    private Webshop(Name alias, Table<WebshopRecord> aliased) {
        this(alias, aliased, null);
    }

    private Webshop(Name alias, Table<WebshopRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>webshop</code> table reference
     */
    public Webshop(String alias) {
        this(DSL.name(alias), WEBSHOP);
    }

    /**
     * Create an aliased <code>webshop</code> table reference
     */
    public Webshop(Name alias) {
        this(alias, WEBSHOP);
    }

    /**
     * Create a <code>webshop</code> table reference
     */
    public Webshop() {
        this(DSL.name("webshop"), null);
    }

    public <O extends Record> Webshop(Table<O> child, ForeignKey<O, WebshopRecord> key) {
        super(child, key, WEBSHOP);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<WebshopRecord, Long> getIdentity() {
        return (Identity<WebshopRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<WebshopRecord> getPrimaryKey() {
        return Keys.WEBSHOP_PK;
    }

    @Override
    public List<UniqueKey<WebshopRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CONSTRAINT_4, Keys.CONSTRAINT_48);
    }

    @Override
    public Webshop as(String alias) {
        return new Webshop(DSL.name(alias), this);
    }

    @Override
    public Webshop as(Name alias) {
        return new Webshop(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Webshop rename(String name) {
        return new Webshop(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Webshop rename(Name name) {
        return new Webshop(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
