buildscript {
	dependencies {
		//classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.18'
	}
}

plugins {
	id("java")
	id("jacoco")
	id("com.github.johnrengelman.shadow") version "7.1.1"
	id("io.micronaut.application") version "3.2.2"
	id("org.flywaydb.flyway") version "8.3.0"
	id("io.micronaut.aot") version "3.2.2"
	//id("com.google.protobuf") version "0.8.18"
}

group = "com.optiply.endpoint"

micronaut {
	runtime("netty")
	testRuntime("spock2")
	processing {
		incremental(true)
		annotations("com.optiply.endpoint.*")
	}

	aot {
		cacheEnvironment.set(true)
		optimizeServiceLoading.set(true)
		optimizeClassLoading.set(true)
		convertYamlToJava.set(false)
		precomputeOperations.set(true)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation project(":infrastructure")
	annotationProcessor(group: 'org.projectlombok', name: 'lombok')
	annotationProcessor(group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.4.2.Final')
	annotationProcessor(group: 'io.micronaut', name: 'micronaut-http-validation')
	annotationProcessor(group: 'io.micronaut.data', name: 'micronaut-data-processor')
	annotationProcessor(group: 'io.micronaut', name: 'micronaut-validation')
	//annotationProcessor(group: 'io.micronaut.security', name: 'micronaut-security-annotations')
	compileOnly(group: 'org.projectlombok', name: 'lombok')
	implementation(group: 'commons-validator', name: 'commons-validator', version: '1.7')
	implementation(group: 'com.google.code.gson', name: 'gson', version: '2.9.0')
	implementation(group: 'org.jooq', name: 'jooq-meta', version: "3.16.4")
	implementation(group: 'org.mapstruct', name: 'mapstruct', version: '1.4.2.Final')
	implementation(group: 'io.micronaut', name: 'micronaut-http-client')
	implementation(group: 'io.micronaut', name: 'micronaut-management')
	implementation(group: 'io.micronaut', name: 'micronaut-runtime')
	implementation(group: 'io.micronaut.tracing', name: 'micronaut-tracing-jaeger')
	implementation(group: 'io.micronaut.flyway', name: 'micronaut-flyway')
	implementation(group: 'io.micronaut.kubernetes', name: 'micronaut-kubernetes-discovery-client')
	implementation(group: 'io.micronaut.r2dbc', name: 'micronaut-r2dbc-core')
	implementation(group: 'io.micronaut.reactor', name: 'micronaut-reactor')
	implementation(group: 'io.micronaut.reactor', name: 'micronaut-reactor-http-client')
	implementation(group: 'io.micronaut.data', name: 'micronaut-data-r2dbc')
	implementation(group: 'io.micronaut.data', name: 'micronaut-data-jdbc')
	implementation(group: 'io.micronaut.sql', name: 'micronaut-jdbc-hikari')
	implementation(group: 'io.micronaut.sql', name: 'micronaut-jooq')
	implementation(group: 'io.micronaut', name: 'micronaut-validation')
	//implementation(group: 'io.micronaut.grpc', name: 'micronaut-grpc-runtime');
	//implementation(group: 'io.micronaut.security', name: 'micronaut-security-annotations')
	//implementation(group: 'io.micronaut.security', name: 'micronaut-security-jwt')
	//implementation(group: 'io.micronaut.kafka', name: 'micronaut-kafka')
	//implementation(group: 'io.confluent', name: 'kafka-protobuf-serializer', version: '6.2.1')
	//implementation(group: 'io.micronaut.micrometer', name: 'micronaut-micrometer-core')
	//implementation(group: 'io.micronaut.micrometer', name: 'micronaut-micrometer-registry-prometheus')
	//implementation(group: 'javax.annotation', name: 'javax.annotation-api')
	runtimeOnly(group: 'ch.qos.logback', name: 'logback-classic')
	runtimeOnly(group: 'io.r2dbc', name: 'r2dbc-postgresql')
	runtimeOnly(group: 'org.postgresql', name: 'postgresql')
	runtimeOnly(group: 'io.r2dbc', name: 'r2dbc-pool', version: '0.9.0.RELEASE')
	//runtimeOnly(group: 'io.micronaut.test', name: 'micronaut-test-spock', version: '3.1.1')
	testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine')
	testImplementation(group: 'io.projectreactor', name: 'reactor-test', version: '3.4.16')
	testImplementation(group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.13.2')
	testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api')
	testImplementation(group: 'io.micronaut.test', name: 'micronaut-test-junit5')
	testImplementation(group: 'org.mockito', name: 'mockito-core')
	//testImplementation(group: 'org.testcontainers', name: 'junit-jupiter')
	//testImplementation(group: 'org.testcontainers', name: 'r2dbc')
	//testImplementation(group: 'org.testcontainers', name: 'postgresql')
	//testImplementation(group: 'org.testcontainers', name: 'testcontainers')
	//testImplementation(group: 'org.testcontainers', name: 'kafka', version: '1.16.3')
	//testImplementation(group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.13.3')
}

test {
	useJUnitPlatform()
}

application {
	mainClass.set("com.optiply.endpoint.EndpointApplication")
}

sourceSets {
//main {
//   java {
//     srcDirs("build/generated/source/proto/main/java")
//   }
//}
	test {
		java {
			srcDirs = ["src/test/java/integration", "src/test/java/unit"]
		}
	}
}


jacocoTestReport {
	reports {
		xml.enabled true
	}
}

plugins.withType(JacocoPlugin) {
	tasks["test"].finalizedBy 'jacocoTestReport'
}

flyway {
	url = System.env.DATASOURCE_URL ? System.env.DATASOURCE_URL : 'jdbc:postgresql://localhost:5432/postgres'
	user = System.env.DATASOURCE_USERNAME ? System.env.DATASOURCE_USERNAME : 'postgres'
	password = System.env.DATASOURCE_PASSWORD ? System.env.DATASOURCE_PASSWORD : 'postgres'
	schemas = ['public']
	locations = ["classpath:db/migration"]
}

//protobuf {
//    generatedFilesBaseDir = "${projectDir}/build/generated/"
//    protoc {
//        artifact = 'com.google.protobuf:protoc:3.0.0'
//    }
//    plugins {
//        grpc {
//            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
//        }
//    }
//}
